import React from "react";
import {BoardView} from "./view.js";
import {ChessBoard} from "./chess.mjs";
import {ResourceBar} from "./resourcebar.js";
import {Piece} from "./enums.mjs";
import Stack from "react-bootstrap/Stack";
/**
 * React component that displays a Chess Royale game, with the board, resource
 * bar, and buttons.
 */
class Game extends React.Component {
  /**
   * Requires [props] to have a [manager], [socket], and [color].
   * 
   * This object's display state includes the [board], the [selectRow] and
   * [selectCol], [ready], and [baseTime].
   * The [board] is the state of the chess board to be displayed on the screen
   * [selectRow] and [selectCol] indicate the coordinates of the square the
   * user has selected
   * [ready] is a boolean indicating whether the user has indicated he/she is
   * ready to play.
   * [baseTime] is a system time in milliseconds such that 
   * (Date.now() - baseTime) / 3000 is the number of resources the user has.
   * 
   * This object's other state objects are [socket], [started], [barUpdater],
   * and [delay]
   * 
   * [socket] is the Socket.io object used to communicate with the server. Upon
   * construction, all previous listeners are removed and other listeners are
   * added. When the view switches back to the lobby, the added listeners may
   * be removed.
   * 
   * [started] is a boolean storing whether the game has started
   * 
   * [barUpdater] is a thread that updates the resource bar every 100 ms. When
   * the client switches back to the lobby, barUpdater must be cancelled.
   *
   * [delay] is list of row, col, time tuples. It records the last time a
   * piece controlled by this player landed on the square, and if that time
   * was more than 1000 ms ago, that square is then removed. The delays are
   * added to the end of the list and delays are removed from the beginning of
   * the list.
   * 
   * This view responds to the following server requests:
   * "board", [board state]: updates the chess board to the given board state
   *   require [board state] to be a string representation, generated by 
   *   ChessBoard.toString()
   * "started": Notifies this view that the chess game has started.
   * "gameover", [result]: Notifies this view that the game is over, and puts
   *   up the end of game screen. Requires [result] is a boolean: true for
   *   white winning, false for black winning.
   * 
   * This view emits the following requests:
   * "ready", [ack]: notifies the server that the client is ready to start
   *   the game. The [ack] function should be called upon receipt, with no
   *   arguments.
   * "leave": notifies the server that the client has left the game.
   * "move", [move, ack]: Notifies the server that the client has requested a
   *   move to be made on the chess board. [move] is a length-4 list of integers
   *   corresponding to the coordinates of the move. [ack] should be called if
   *   the move was successful, with no arguments.
   */
  constructor(props) {
    super(props);
    this.manager = props.manager;
    this.socket = props.socket;
    this.state = {
      board: ChessBoard.startingPosition(),
      selectRow: -1,
      selectCol: -1,
      ready:false,
      delay: [],
    }
    this.color = props.color;
    this.started = false;

    this.socket.removeAllListeners();
    this.socket.on("board", (state) => {
      this.setState({ board: ChessBoard.fromString(state) });
    });
    this.socket.on("started", (time) => {
      this.started = true;
      this.setState({ baseTime: time });
      this.barUpdater = setInterval(() => {
        let now = Date.now();
        if(now - this.state.baseTime > 30000) {
          this.setState({ baseTime: now - 30000 });
        } else this.setState({});
      }, 100);
    });
    this.socket.on("gameover", (result) => {
      clearInterval(this.barUpdater);
      let popup = setInterval(() => {
        if(result) window.alert("white wins!");
        else window.alert("black wins!");
        clearInterval(popup);
      }, 1000);
    });
  }

  leaveGame() {
    if(this.barUpdater !== undefined) {
      clearInterval(this.barUpdater);
    }
    this.socket.emit("leave");
    this.manager.changeState("lobby");
  }

  declareReady() {
    this.socket.emit("ready", () => {
      this.setState({ ready: true });
    });
  }

  onClick(i, j) {
    if(this.state.selectRow === -1) {
      if(this.state.board.pieceAt(i, j) !== Piece.NULL) {
        this.setState({
          selectRow: i,
          selectCol: j,
        });
      }
    } else {
      let now = Date.now();
      if(now - this.state.baseTime < 3000) return;
      for(let index = 0; index < this.state.delay.length; index++) {
        let [r, c, t] = this.state.delay[index];
        if(r === this.state.selectRow && c === this.state.selectCol) {
          if(now - t < 1000) return;
          else break;
        }
        if(now - t < 1000) break;
      }
      this.socket.emit("move", [this.state.selectRow, this.state.selectCol,
        i, j], () => {
          for(let index = this.state.delay.length - 1; index >= 0; index--) {
            let [r, c, _] = this.state.delay[index];
            if(i === r && j === c) this.state.delay.splice(index, 1);
            index--;
          }
          this.state.delay.push([i, j, now]);
          this.setState({ baseTime: this.state.baseTime + 3000 });
      });
      this.setState({
        selectRow: -1,
        selectCol: -1,
      });
    }
  }

  render() {
    let now = Date.now();
    let amount = this.started ? (now - this.state.baseTime) / 3000 : 0;
    while(this.state.delay.length > 0 && this.state.delay[2] < now - 1000) {
      this.state.delay.splice(0, 1);
    }
    let readyButton;
    if(this.state.ready) {
      readyButton = <button className="gamectrl">Ready!</button>
    } else {
      readyButton = <button className="gamectrl" 
        onClick={() => {this.declareReady()}}>Start</button>
    }
    return <div>
      <Stack direction="row" style={{display:"flex"}}>
        <div>
          <BoardView
            board={this.state.board}
            selectRow={this.state.selectRow}
            selectCol={this.state.selectCol}
            onClick={(i, j) => {this.onClick(i, j)}}
            color={this.color}
            delay={this.state.delay}
          />
          <ResourceBar amount={amount}/>
        </div>
        <div className="ctrl_column">
          <Stack spacing={2} mt={0}>
            <div>
            <button className="gamectrl" onClick={() => {this.leaveGame()}}>
              Leave
            </button>
            </div>
            <div>{readyButton}</div>
          </Stack>
        </div>
      </Stack>
    </div>;
  }
}

export {Game};
